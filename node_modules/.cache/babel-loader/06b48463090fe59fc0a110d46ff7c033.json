{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useContext } from \"react\";\nimport { AppContext } from \"../utils/context\";\nimport { fakeFetch } from \"../utils/fetch\";\nimport { useWrappedRequest } from \"./useWrappedRequest\";\nexport function useCustomFetch() {\n  _s();\n\n  const {\n    cache\n  } = useContext(AppContext);\n  const {\n    loading,\n    wrappedRequest\n  } = useWrappedRequest();\n  const customFetch = useCallback(async (endpoint, params) => {\n    const cacheKey = JSON.stringify({\n      endpoint,\n      params\n    });\n    const cacheResponse = cache === null || cache === void 0 ? void 0 : cache.current.get(cacheKey);\n\n    if (cacheResponse) {\n      const data = JSON.parse(cacheResponse);\n      return data;\n    }\n\n    const result = await fakeFetch(endpoint, params);\n    cache === null || cache === void 0 ? void 0 : cache.current.set(cacheKey, JSON.stringify(result));\n    return result;\n  }, [cache]);\n  const clearCache = useCallback(() => {\n    if (cache !== null && cache !== void 0 && cache.current) {\n      cache.current = new Map();\n      return;\n    }\n  }, [cache]);\n  return {\n    customFetch,\n    clearCache\n  };\n}\n\n_s(useCustomFetch, \"CDx7WKTPKm//YvNmALP5yZ+/p1A=\", false, function () {\n  return [useWrappedRequest];\n});","map":{"version":3,"names":["useCallback","useContext","AppContext","fakeFetch","useWrappedRequest","useCustomFetch","cache","loading","wrappedRequest","customFetch","endpoint","params","cacheKey","JSON","stringify","cacheResponse","current","get","data","parse","result","set","clearCache","Map"],"sources":["/Users/dbindra/Downloads/ramp-fe-challenge/src/hooks/useCustomFetch.ts"],"sourcesContent":["import { useCallback, useContext } from \"react\"\nimport { AppContext } from \"../utils/context\"\nimport { fakeFetch, RegisteredEndpoints } from \"../utils/fetch\"\nimport { useWrappedRequest } from \"./useWrappedRequest\"\n\nexport function useCustomFetch() {\n  const { cache } = useContext(AppContext)\n  const { loading, wrappedRequest } = useWrappedRequest()\n\n  const customFetch = useCallback(\n    async <TData, TParams extends object = object>(\n      endpoint: RegisteredEndpoints,\n      params?: TParams\n    ): Promise<TData> => {\n        const cacheKey = JSON.stringify({ endpoint, params })\n        const cacheResponse = cache?.current.get(cacheKey)\n\n        if (cacheResponse) {\n          const data = JSON.parse(cacheResponse)\n          return data as Promise<TData>\n        }\n\n        const result = await fakeFetch<TData>(endpoint, params)\n        cache?.current.set(cacheKey, JSON.stringify(result))\n        return result\n      },\n    [cache]\n  )\n\n  const clearCache = useCallback(() => {\n    if (cache?.current) {\n      cache.current = new Map<string, string>()\n      return\n    }\n  }, [cache])\n\n  return {customFetch, clearCache}\n}"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,SAAT,QAA+C,gBAA/C;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA,OAAO,SAASC,cAAT,GAA0B;EAAA;;EAC/B,MAAM;IAAEC;EAAF,IAAYL,UAAU,CAACC,UAAD,CAA5B;EACA,MAAM;IAAEK,OAAF;IAAWC;EAAX,IAA8BJ,iBAAiB,EAArD;EAEA,MAAMK,WAAW,GAAGT,WAAW,CAC7B,OACEU,QADF,EAEEC,MAFF,KAGqB;IACjB,MAAMC,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAe;MAAEJ,QAAF;MAAYC;IAAZ,CAAf,CAAjB;IACA,MAAMI,aAAa,GAAGT,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEU,OAAP,CAAeC,GAAf,CAAmBL,QAAnB,CAAtB;;IAEA,IAAIG,aAAJ,EAAmB;MACjB,MAAMG,IAAI,GAAGL,IAAI,CAACM,KAAL,CAAWJ,aAAX,CAAb;MACA,OAAOG,IAAP;IACD;;IAED,MAAME,MAAM,GAAG,MAAMjB,SAAS,CAAQO,QAAR,EAAkBC,MAAlB,CAA9B;IACAL,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEU,OAAP,CAAeK,GAAf,CAAmBT,QAAnB,EAA6BC,IAAI,CAACC,SAAL,CAAeM,MAAf,CAA7B;IACA,OAAOA,MAAP;EACD,CAhB0B,EAiB7B,CAACd,KAAD,CAjB6B,CAA/B;EAoBA,MAAMgB,UAAU,GAAGtB,WAAW,CAAC,MAAM;IACnC,IAAIM,KAAJ,aAAIA,KAAJ,eAAIA,KAAK,CAAEU,OAAX,EAAoB;MAClBV,KAAK,CAACU,OAAN,GAAgB,IAAIO,GAAJ,EAAhB;MACA;IACD;EACF,CAL6B,EAK3B,CAACjB,KAAD,CAL2B,CAA9B;EAOA,OAAO;IAACG,WAAD;IAAca;EAAd,CAAP;AACD;;GAhCejB,c;UAEsBD,iB"},"metadata":{},"sourceType":"module"}
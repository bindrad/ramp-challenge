{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useContext } from \"react\";\nimport { AppContext } from \"../utils/context\";\nimport { fakeFetch } from \"../utils/fetch\";\nimport { useWrappedRequest } from \"./useWrappedRequest\";\nexport function useCustomFetch() {\n  _s();\n\n  const {\n    cache\n  } = useContext(AppContext);\n  const {\n    loading,\n    wrappedRequest\n  } = useWrappedRequest();\n  const fetchWithCache = useCallback(async (endpoint, params) => {\n    const cacheKey = JSON.stringify({\n      endpoint,\n      params\n    });\n    const cacheResponse = cache === null || cache === void 0 ? void 0 : cache.current.get(cacheKey);\n\n    if (cacheResponse) {\n      const data = JSON.parse(cacheResponse);\n      return data;\n    }\n\n    const result = await fakeFetch(endpoint, params);\n    cache === null || cache === void 0 ? void 0 : cache.current.set(cacheKey, JSON.stringify(result));\n    return result;\n  }, [cache]);\n  const clearCache = useCallback(() => {\n    if (cache !== null && cache !== void 0 && cache.current) {\n      cache.current = new Map();\n      return;\n    }\n  }, [cache]);\n  const clearCacheByEndpoint = useCallback(endpointsToClear => {\n    if ((cache === null || cache === void 0 ? void 0 : cache.current) === undefined) {\n      return;\n    }\n\n    const cacheKeys = Array.from(cache.current.keys());\n\n    for (const key of cacheKeys) {\n      const clearKey = endpointsToClear.some(endpoint => key.startsWith(endpoint));\n\n      if (clearKey) {\n        cache.current.delete(key);\n      }\n    }\n  }, [cache]);\n  return {\n    fetchWithCache,\n    fetchWithoutCache,\n    clearCache,\n    clearCacheByEndpoint,\n    loading\n  };\n}\n\n_s(useCustomFetch, \"3++V0ZpVB57ghz16BY1VVZIf8zc=\", false, function () {\n  return [useWrappedRequest];\n});\n\nfunction getCacheKey(endpoint, params) {\n  return `${endpoint}${params ? `@${JSON.stringify(params)}` : \"\"}`;\n}","map":{"version":3,"names":["useCallback","useContext","AppContext","fakeFetch","useWrappedRequest","useCustomFetch","cache","loading","wrappedRequest","fetchWithCache","endpoint","params","cacheKey","JSON","stringify","cacheResponse","current","get","data","parse","result","set","clearCache","Map","clearCacheByEndpoint","endpointsToClear","undefined","cacheKeys","Array","from","keys","key","clearKey","some","startsWith","delete","fetchWithoutCache","getCacheKey"],"sources":["/Users/dbindra/Downloads/ramp-fe-challenge/src/hooks/useCustomFetch.ts"],"sourcesContent":["import { useCallback, useContext } from \"react\"\nimport { AppContext } from \"../utils/context\"\nimport { fakeFetch, RegisteredEndpoints } from \"../utils/fetch\"\nimport { useWrappedRequest } from \"./useWrappedRequest\"\n\nexport function useCustomFetch() {\n  const { cache } = useContext(AppContext)\n  const { loading, wrappedRequest } = useWrappedRequest()\n\n  const fetchWithCache = useCallback(\n    async <TData, TParams extends object = object>(\n      endpoint: RegisteredEndpoints,\n      params?: TParams\n    ): Promise<TData> => {\n        const cacheKey = JSON.stringify({ endpoint, params })\n        const cacheResponse = cache?.current.get(cacheKey)\n\n        if (cacheResponse) {\n          const data = JSON.parse(cacheResponse)\n          return data as Promise<TData>\n        }\n\n        const result = await fakeFetch<TData>(endpoint, params)\n        cache?.current.set(cacheKey, JSON.stringify(result))\n        return result\n      },\n    [cache]\n  )\n\n  const clearCache = useCallback(() => {\n    if (cache?.current) {\n      cache.current = new Map<string, string>()\n      return\n    }\n  }, [cache])\n\n  const clearCacheByEndpoint = useCallback(\n    (endpointsToClear: RegisteredEndpoints[]) => {\n      if (cache?.current === undefined) {\n        return\n      }\n\n      const cacheKeys = Array.from(cache.current.keys())\n\n      for (const key of cacheKeys) {\n        const clearKey = endpointsToClear.some((endpoint) => key.startsWith(endpoint))\n\n        if (clearKey) {\n          cache.current.delete(key)\n        }\n      }\n    },\n    [cache]\n  )\n\n  return { fetchWithCache, fetchWithoutCache, clearCache, clearCacheByEndpoint, loading }\n}\n\nfunction getCacheKey(endpoint: RegisteredEndpoints, params?: object) {\n  return `${endpoint}${params ? `@${JSON.stringify(params)}` : \"\"}`\n}\n"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,UAAtB,QAAwC,OAAxC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,SAAT,QAA+C,gBAA/C;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA,OAAO,SAASC,cAAT,GAA0B;EAAA;;EAC/B,MAAM;IAAEC;EAAF,IAAYL,UAAU,CAACC,UAAD,CAA5B;EACA,MAAM;IAAEK,OAAF;IAAWC;EAAX,IAA8BJ,iBAAiB,EAArD;EAEA,MAAMK,cAAc,GAAGT,WAAW,CAChC,OACEU,QADF,EAEEC,MAFF,KAGqB;IACjB,MAAMC,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAe;MAAEJ,QAAF;MAAYC;IAAZ,CAAf,CAAjB;IACA,MAAMI,aAAa,GAAGT,KAAH,aAAGA,KAAH,uBAAGA,KAAK,CAAEU,OAAP,CAAeC,GAAf,CAAmBL,QAAnB,CAAtB;;IAEA,IAAIG,aAAJ,EAAmB;MACjB,MAAMG,IAAI,GAAGL,IAAI,CAACM,KAAL,CAAWJ,aAAX,CAAb;MACA,OAAOG,IAAP;IACD;;IAED,MAAME,MAAM,GAAG,MAAMjB,SAAS,CAAQO,QAAR,EAAkBC,MAAlB,CAA9B;IACAL,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEU,OAAP,CAAeK,GAAf,CAAmBT,QAAnB,EAA6BC,IAAI,CAACC,SAAL,CAAeM,MAAf,CAA7B;IACA,OAAOA,MAAP;EACD,CAhB6B,EAiBhC,CAACd,KAAD,CAjBgC,CAAlC;EAoBA,MAAMgB,UAAU,GAAGtB,WAAW,CAAC,MAAM;IACnC,IAAIM,KAAJ,aAAIA,KAAJ,eAAIA,KAAK,CAAEU,OAAX,EAAoB;MAClBV,KAAK,CAACU,OAAN,GAAgB,IAAIO,GAAJ,EAAhB;MACA;IACD;EACF,CAL6B,EAK3B,CAACjB,KAAD,CAL2B,CAA9B;EAOA,MAAMkB,oBAAoB,GAAGxB,WAAW,CACrCyB,gBAAD,IAA6C;IAC3C,IAAI,CAAAnB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEU,OAAP,MAAmBU,SAAvB,EAAkC;MAChC;IACD;;IAED,MAAMC,SAAS,GAAGC,KAAK,CAACC,IAAN,CAAWvB,KAAK,CAACU,OAAN,CAAcc,IAAd,EAAX,CAAlB;;IAEA,KAAK,MAAMC,GAAX,IAAkBJ,SAAlB,EAA6B;MAC3B,MAAMK,QAAQ,GAAGP,gBAAgB,CAACQ,IAAjB,CAAuBvB,QAAD,IAAcqB,GAAG,CAACG,UAAJ,CAAexB,QAAf,CAApC,CAAjB;;MAEA,IAAIsB,QAAJ,EAAc;QACZ1B,KAAK,CAACU,OAAN,CAAcmB,MAAd,CAAqBJ,GAArB;MACD;IACF;EACF,CAfqC,EAgBtC,CAACzB,KAAD,CAhBsC,CAAxC;EAmBA,OAAO;IAAEG,cAAF;IAAkB2B,iBAAlB;IAAqCd,UAArC;IAAiDE,oBAAjD;IAAuEjB;EAAvE,CAAP;AACD;;GAnDeF,c;UAEsBD,iB;;;AAmDtC,SAASiC,WAAT,CAAqB3B,QAArB,EAAoDC,MAApD,EAAqE;EACnE,OAAQ,GAAED,QAAS,GAAEC,MAAM,GAAI,IAAGE,IAAI,CAACC,SAAL,CAAeH,MAAf,CAAuB,EAA9B,GAAkC,EAAG,EAAhE;AACD"},"metadata":{},"sourceType":"module"}